---
- name: Create the directory where to store the certificates
  file:
    path: "{{ user_home }}/{{ certificate_path }}"
    state: directory
    mode: '0755'

- name: add controller
  set_fact:
    cert_hostname_list: "{{ cert_hostname_list + [item.ip, item.name]}}"
  loop:
    "{{ controllers }}"

- name: add loadbalancer
  set_fact:
    cert_hostname_list: "{{ cert_hostname_list + [item.ip, item.name]}}"
  loop:
    "{{ loadbalancer }}"

- name: create cert string
  set_fact:
    cert_hostname: "{{ ','.join((cert_hostname_list))}}"

- name: Check if CA already exists
  stat:
    path: "{{ user_home }}/{{ certificate_path }}/ca.pem"
  register: ca_file

- name: Generate CA
  shell: "cfssl gencert -initca {{ role_path }}/templates/ca-csr.json | cfssljson -bare {{ user_home }}/{{ certificate_path }}/ca"
  when: not ca_file.stat.exists

- name: Check if Admin keys already exists
  stat:
    path: "{{ user_home }}/{{ certificate_path }}/admin.pem"
  register: admin_file

- name: Generate admin certificates
  shell: "cfssl gencert -ca={{ user_home }}/{{ certificate_path }}/ca.pem \
    -ca-key={{ user_home }}/{{ certificate_path }}/ca-key.pem \
    -config={{ role_path }}/templates/ca-config.json -profile=kubernetes \
    {{ role_path }}/templates/admin-csr.json | cfssljson -bare {{ user_home }}/{{ certificate_path }}/admin"
  when: not admin_file.stat.exists

- name: Check if workers jsons already exists
  stat:
    path: "{{ role_path }}/templates/worker-{{ workers[0]['name'] }}.json"
  register: workers_file

- name: Create the configuration file
  template:
    src: worker-csr.json.j2
    dest: "{{ role_path }}/templates/worker-{{ item.name }}.json"
    mode: '0644'
  loop:
    "{{ workers }}"
  when: not workers_file.stat.exists

- name: Check if workers keys already exists
  stat:
    path: "{{ user_home }}/{{ certificate_path }}/{{ workers[0]['name'] }}.pem"
  register: workers_pem

- name: Generate worker certificates
  shell: "cfssl gencert \
    -ca={{ user_home }}/{{ certificate_path }}/ca.pem \
    -ca-key={{ user_home }}/{{ certificate_path }}/ca-key.pem \
    -config={{ role_path }}/templates/ca-config.json \
    -hostname={{ item.ip }},{{item.name}} \
    -profile=kubernetes \
    {{ role_path }}/templates/worker-{{ item.name }}.json | cfssljson -bare \
    {{ user_home }}/{{ certificate_path }}/{{item.name}}"
  loop:
    "{{ workers }}"
  when: not workers_pem.stat.exists

- name: Check node certificates
  shell: openssl x509 -in {{ user_home }}/{{ certificate_path }}/node-1.pem -text -noout
  register: cert_out

- name: Print check for certificate
  debug:
    msg: "Certificates OK"
  when: cert_out is defined and cert_out.stdout.find('CN=system:node:node-1')

- name: Check Controlelr manager certificate
  stat:
    path: "{{ user_home }}/{{ certificate_path }}/kube-controller-manager.pem"
  register: cm_pem

- name: Generate controller manager certificates
  shell: "cfssl gencert \
    -ca={{ user_home }}/{{ certificate_path }}/ca.pem \
    -ca-key={{ user_home }}/{{ certificate_path }}/ca-key.pem \
    -config={{ role_path }}/templates/ca-config.json \
    -profile=kubernetes \
    {{ role_path }}/templates/kube-controller-manager-csr.json | cfssljson -bare \
    {{ user_home }}/{{ certificate_path }}/kube-controller-manager"
  when: not cm_pem.stat.exists

- name: Check kube-proxy certificate
  stat:
    path: "{{ user_home }}/{{ certificate_path }}/kube-proxy.pem"
  register: kp_pem

- name: Generate kube-proxy certificates
  shell: "cfssl gencert \
    -ca={{ user_home }}/{{ certificate_path }}/ca.pem \
    -ca-key={{ user_home }}/{{ certificate_path }}/ca-key.pem \
    -config={{ role_path }}/templates/ca-config.json \
    -profile=kubernetes \
    {{ role_path }}/templates/kube-proxy-csr.json | cfssljson -bare \
    {{ user_home }}/{{ certificate_path }}/kube-proxy"
  when: not kp_pem.stat.exists

- name: Check kube-scheduler certificate
  stat:
    path: "{{ user_home }}/{{ certificate_path }}/kube-scheduler.pem"
  register: ks_pem

- name: Generate kube-scheduler certificates
  shell: "cfssl gencert \
    -ca={{ user_home }}/{{ certificate_path }}/ca.pem \
    -ca-key={{ user_home }}/{{ certificate_path }}/ca-key.pem \
    -config={{ role_path }}/templates/ca-config.json \
    -profile=kubernetes \
    {{ role_path }}/templates/kube-scheduler-csr.json | cfssljson -bare \
    {{ user_home }}/{{ certificate_path }}/kube-scheduler"
  when: not ks_pem.stat.exists

- name: Check kubernetes certificate
  stat:
    path: "{{ user_home }}/{{ certificate_path }}/kubernetes.pem"
  register: k8s_pem

- name: Generate kubernetes certificates
  shell: "cfssl gencert \
    -ca={{ user_home }}/{{ certificate_path }}/ca.pem \
    -ca-key={{ user_home }}/{{ certificate_path }}/ca-key.pem \
    -config={{ role_path }}/templates/ca-config.json \
    -hostname={{ cert_hostname }} \
    -profile=kubernetes \
    {{ role_path }}/templates/kubernetes-csr.json | cfssljson -bare \
    {{ user_home }}/{{ certificate_path }}/kubernetes"
  when: not k8s_pem.stat.exists

- name: Check Service Account certificate
  stat:
    path: "{{ user_home }}/{{ certificate_path }}/service-account.pem"
  register: sa_pem

- name: Generate Service Account certificates
  shell: "cfssl gencert \
    -ca={{ user_home }}/{{ certificate_path }}/ca.pem \
    -ca-key={{ user_home }}/{{ certificate_path }}/ca-key.pem \
    -config={{ role_path }}/templates/ca-config.json \
    -profile=kubernetes \
    {{ role_path }}/templates/service-account-csr.json | cfssljson -bare \
    {{ user_home }}/{{ certificate_path }}/service-account"
  when: not sa_pem.stat.exists
